"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const __1 = require("..");
const response = new node_fetch_1.Response('Hello World');
const mockFetch = () => jest.fn().mockResolvedValue(response);
const getApi = () => {
    const asUser = {
        requestConfluence: mockFetch(),
        requestJira: mockFetch()
    };
    const asApp = {
        requestConfluence: mockFetch(),
        requestJira: mockFetch()
    };
    const api = {
        fetch: mockFetch(),
        requestConfluence: mockFetch(),
        requestJira: mockFetch(),
        asUser: () => asUser,
        asApp: () => asApp
    };
    return api;
};
const mockUrl = 'https://foo';
let api;
let wrappedApi;
describe('wrapFetchApiMethods', () => {
    beforeEach(() => {
        api = getApi();
        wrappedApi = __1.wrapFetchApiMethods(api, (fetchApi) => (url) => fetchApi(url));
    });
    it.each(['fetch', 'requestConfluence', 'requestJira'])('passes through requests to %s()', async (method) => {
        const result = await wrappedApi[method](mockUrl);
        expect(api[method]).toHaveBeenCalledWith(mockUrl);
        expect(result).toEqual(response);
    });
    it.each(['requestConfluence', 'requestJira'])('passes through requests to api.asUser().%s()', async (method) => {
        const result = await wrappedApi.asUser()[method](mockUrl);
        expect(api.asUser()[method]).toHaveBeenCalledWith(mockUrl);
        expect(result).toEqual(response);
    });
    it.each(['requestConfluence', 'requestJira'])('passes through requests to api.asApp().%s()', async (method) => {
        const result = await wrappedApi.asApp()[method](mockUrl);
        expect(api.asApp()[method]).toHaveBeenCalledWith(mockUrl);
        expect(result).toEqual(response);
    });
});
