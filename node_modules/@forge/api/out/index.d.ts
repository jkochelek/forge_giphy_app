import { RequestInit, Response } from 'node-fetch';
import { QueryApi } from './storage';
export declare type APIResponse = Pick<Response, 'json' | 'text' | 'arrayBuffer' | 'ok' | 'status' | 'statusText' | 'headers'>;
export declare type FetchMethod = (url: string, init?: RequestInit) => Promise<APIResponse>;
export declare type FetchOptions = RequestInit;
export interface FetchMethods {
    requestJira: FetchMethod;
    requestConfluence: FetchMethod;
}
export interface StorageMethods {
    get: (key: string) => Promise<any>;
    set: (key: string, value: any) => Promise<void>;
    delete: (key: string) => Promise<void>;
}
export interface PropertiesAPI {
    onJiraProject: (context: string) => StorageMethods;
    onJiraIssue: (context: string) => StorageMethods;
    onConfluencePage: (context: string) => StorageMethods;
    onConfluenceSpace: (context: string) => StorageMethods;
}
interface StorageAPI extends StorageMethods, QueryApi {
}
export interface StoreAPI extends PropertiesAPI {
    onJiraProject: (context: string) => StorageMethods;
    onJiraIssue: (context: string) => StorageMethods;
    onConfluencePage: (context: string) => StorageMethods;
    onConfluenceSpace: (context: string) => StorageMethods;
}
export interface FetchAPI extends FetchMethods {
    asUser(): FetchMethods;
    asApp(): FetchMethods;
    fetch: FetchMethod;
}
export interface ForgeAPI extends FetchAPI {
    store: StoreAPI;
}
declare const asUser: () => FetchMethods;
declare const asApp: () => FetchMethods;
declare const fetch: FetchMethod;
declare const requestJira: FetchMethod;
declare const requestConfluence: FetchMethod;
declare const store: PropertiesAPI;
declare const storage: StorageAPI;
declare const properties: PropertiesAPI;
declare const API: ForgeAPI;
export default API;
export { asUser, asApp, fetch, requestJira, requestConfluence, store, storage, properties };
export { QueryBuilder, QueryApi, Condition, ListResult, Predicate, Result, Value } from './storage/storage-adapter';
export { startsWith } from './storage/conditions';
//# sourceMappingURL=index.d.ts.map